version: '3'
services:
  mysqldb:
    image: mysql:8.0
    restart: always
    container_name: mysqldb
    networks:
      - microservices-network
    ports:
      - "3306:3306"
    expose:
      - "3306"
    environment:
      MYSQL_DATABASE: usersvc
      MYSQL_ROOT_PASSWORD: root
    volumes:
       - "./scripts/schema.sql:/docker-entrypoint-initdb.d/1.sql"
    depends_on:
       - vault
       - setup-vault
  
  consul:
    image: consul
    container_name: consul
    restart: always
    command: agent -dev -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - microservices-network
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    ports:
      - 8400:8400
      - 8500:8500
      - 8600:8600

  redis:
   container_name: redis
   image: redis:6.2.4-alpine
   networks:
      - microservices-network
   hostname: redis
   command: [ "redis-server", "--protected-mode", "no" ]
   ports: 
    - "6379:6379"

  vault:
    image: vault:1.7.3
    networks:
      - microservices-network
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: 00000000-0000-0000-0000-000000000000
      VAULT_ADDR: http://vault:8200
    ports:
      - 8200:8200
    cap_add:
      - IPC_LOCK

  zookeeper:
     image: wurstmeister/zookeeper
     container_name: zookeeper
     networks:
      - microservices-network
     ports:
       - "2181:2181"
  
  kafka:
     image: wurstmeister/kafka
     container_name: kafka
     networks:
      - microservices-network
     ports:
       - "9092:9092"
     depends_on:
       - "zookeeper"
     environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
   
     volumes:
       - /var/run/docker.sock:/var/run/docker.sock

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    networks:
      - microservices-network
    ports:
      - 27017:27017
    volumes:
      - /home/mongo/data:/data/db
    depends_on:
      - kafka

  #This container will stop as soon as the vault-setup script gets completed
  setup-vault:
    image: vault:1.7.3
    networks:
      - microservices-network
    depends_on:
      - vault
    volumes:
      - ./scripts:/scripts
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_DEV_ROOT_TOKEN_ID: 00000000-0000-0000-0000-000000000000
      VAULT_TOKEN: 00000000-0000-0000-0000-000000000000
      CONFIG_ADDR: '/config'
    entrypoint: /scripts/vault-setup.sh

  user-service:
    container_name: user-service
    build: ./user-service
    restart: always
    networks:
      - microservices-network
    ports:
      - "8081:8081"
    environment:
      - spring_cloud_discovery_enabled=true
      - spring_cloud_service-registry_auto-registration_enabled=true
      - spring_cloud_consul_discovery_enabled=true
      - spring_cloud_consul_config_enabled=true
      - spring_cloud_consul_host=consul
      - spring_cloud_consul_port=8500
      - spring_cloud_consul_discovery_prefer-ip-address=true
      - spring_cloud_consul_discovery_scheme=http
    depends_on:
      - mysqldb
      - vault
      - redis
      - setup-vault
      - consul
      - zookeeper
      - kafka
      - mongo

  patient-service:
    container_name: patient-service
    build: ./patient-service
    restart: always
    networks:
      - microservices-network
    ports:
      - "8082:8082"
    environment:
      spring.cloud.consul.host: consul
    depends_on:
      - mysqldb
      - vault
      - user-service
      - setup-vault
      - consul

  vital-sign-service:
    container_name: vital-sign-service
    build: ./vital-sign-service
    restart: always
    networks:
      - microservices-network
    environment:
      spring.cloud.consul.host: consul
    ports:
      - "8083:8083"
    depends_on:
      - mysqldb
      - vault
      - user-service
      - patient-service
      - setup-vault
      - consul

networks:
   microservices-network:
      driver: bridge
